// backend/routes/api/session.js
const express = require('express');
const { Op } = require('sequelize');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { check } = require('express-validator');
const { handleValidationErrors } = require('../../utils/validation');

const { User } = require('../../db/models');
const { setTokenCookie, restoreUser, userLoggedIn } = require('../../utils/auth');
const { getUserFromToken } = require('../../utils/helper');

const router = express.Router();

// Get the current user
router.get('/', async (req, res) => {
    res.status(200);
    if (!userLoggedIn(req)) {
        return res.json({
            user: null
        })
    }

    const user = getUserFromToken(req);
    return res.json(user);
})

// Login user
const validateLogin = [
    check('credential')
        .exists({ checkFalsy: true })
        .notEmpty()
        .withMessage('Email or username is required'),
    check('password')
        .exists({ checkFalsy: true })
        .withMessage('Password is required'),
    handleValidationErrors
];

router.post('/', validateLogin, async (req, res) => {
    const { credential, password } = req.body;

    if (!credential || !password) {
        res.status(400);
        return res.json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
                "credential": "Email or username is required",
                "password": "Password is required"
            }
        })
    }

    // Find email or username
    let user = await User.findOne({
        where: {
            email: credential
        }
    });
    if (!user) {
        user = await User.findOne({
            where: {
                username: credential
            }
        })
    }

    // Check the password
    if (!user || !bcrypt.compareSync(password, user.hashedPassword.toString())) {
        res.status(401);
        return res.json({
            message: "Invalid credentials"
        })
    }

    const safeUser = {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        username: user.username
    };

    await setTokenCookie(res, safeUser);

    res.status(200);
    return res.json({
        user: safeUser
    });
})

module.exports = router;
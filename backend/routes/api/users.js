const express = require('express');
const { Op } = require('sequelize');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const { User } = require('../../db/models');
const { setTokenCookie, restoreUser, userLoggedIn } = require('../../utils/auth');

const router = express.Router();

// Sample Body Validation
// const validateLogin = [
//     check('credential')
//         .exists({ checkFalsy: true })
//         .notEmpty()
//         .withMessage('Email or username is required'),
//     check('password')
//         .exists({ checkFalsy: true })
//         .withMessage('Password is required'),
//     handleValidationErrors
// ];


// Sign up the user
const validateSignUp = [

];

router.post('/', async (req, res) => {
    const { firstName, lastName, email, username, password } = req.body;

    // Body validation error
    if (!firstName || !lastName || !email || !username) {
        res.status(400);
        return res.json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
                "email": "Invalid email",
                "username": "Username is required",
                "firstName": "First Name is required",
                "lastName": "Last Name is required"
        }})
    }

    // Does email already exists?
    const dupEmail = await User.findOne({
        where: {
            email
        }
    });
    if (dupEmail) {
        res.status(500);
        return res.json({
            message: "User already exists",
            errors: {
                email: "User with that email already exists"
            }
        })
    }

    // Does user already exists?
    const dupUser = await User.findOne({
        where: {
            username
        }
    });
    if (dupUser) {
        res.status(500);
        return res.json({
            message: "User already exists",
            errors: {
                username: "User with that username already exists"
            }
        });
    }

    // Creating new user
    const user = await User.create({
        firstName,
        lastName,
        email,
        username,
        hashedPassword: bcrypt.hashSync(password)
    });
    user.save();

    const safeUser = {
        id: user.id,
        firstName: user.firstName,
        lastName: user.lastName,
        email: user.email,
        username: user.username
    };
    await setTokenCookie(res, safeUser);

    res.status(200);
    return res.json({
        user: safeUser
    });
})

module.exports = router;